name: RVM tests
run-name: RVM tests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  check_gambit_from_ubuntu:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}

      - name: Install Gambit Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install texinfo autoconf2.69
          sudo ln -s -f `which autoconf2.69` `which autoconf`

      - name: Download Gambit from the repository
        run: |
          sudo apt-get install gambc

      - name: Compile RSC
        run: |
          cd src
          make rsc.exe

      - name: Install python
        run: sudo apt install python3

      - name: Run simple Python RVM
        run: |
          cd src
          TEST_FEATURES="" TEST_TAGS="py core" HOST=py make check

  check_gambit_v4_7_5:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}

      - name: Install Gambit Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install texinfo autoconf2.69
          sudo ln -s -f `which autoconf2.69` `which autoconf`

      - name: Checkout the gambit repository
        uses: actions/checkout@v2
        with:
          repository: gambit/gambit
          ref: v4.7.5
          path: gambit-src

      - name: Build Gambit for Use
        run: |
          mkdir gambit
          cd gambit-src && ./configure --enable-single-host --prefix=$(pwd)/../gambit  && make -j`nproc` && make install

      - name: Make sure gsi and gsc are working
        run: |
          ./gambit/bin/gsi -v
          ./gambit/bin/gsc -v

      - name: create rsc.exe
        run: |
          cd src
          make rsc.exe GSC=$(pwd)/../gambit/bin/gsc GSI=$(pwd)/../gambit/bin/gsi

      - name: Run simple Python RVM
        run: |
          cd src
          TEST_FEATURES="" TEST_TAGS="py core" HOST=py make check

  compile_RSC:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}

      - name: Cache gambit
        id: cache-gambit
        uses: actions/cache@v3
        env:
          cache-name: cache-gambit
        with:
          path: ./gambit
          key: gambit-v4.9.5-${{ runner.os }}

      - if: ${{ steps.cache-gambit.outputs.cache-hit != 'true' }}
        name: Install Gambit Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install texinfo autoconf2.69
          sudo ln -s -f `which autoconf2.69` `which autoconf`

      - if: ${{ steps.cache-gambit.outputs.cache-hit != 'true' }}
        name: Checkout the gambit repository
        uses: actions/checkout@v2
        with:
          repository: gambit/gambit
          ref: v4.9.5
          path: gambit-src

      - if: ${{ steps.cache-gambit.outputs.cache-hit != 'true' }}
        name: Build Gambit for Use 
        run: |
          mkdir gambit
          cd gambit-src && ./configure --enable-single-host --enable-gambitdir=~~execdir/.. --prefix=$(pwd)/../gambit --enable-targets=""  && make clean && make -j`nproc` core && make modules && make install

      - name: Make sure gsi and gsc are working
        run: |
          ./gambit/bin/gsi -v
          ./gambit/bin/gsc -v

      - name: create rsc.exe
        run: |
          cd src
          make rsc.exe GSC=$(pwd)/../gambit/bin/gsc GSI=$(pwd)/../gambit/bin/gsi

      - name: upload rsc.exe
        uses: actions/upload-artifact@v4
        with:
          name: rsc-exe
          path: src/rsc.exe

      - name: create minify
        run: |
          cd src
          make scripts/minify GSC=$(pwd)/../gambit/bin/gsc GSI=$(pwd)/../gambit/bin/gsi

      - name: upload minify
        uses: actions/upload-artifact@v4
        with:
          name: minify-exe
          path: src/scripts/minify

  rvm_generation_tests:
    runs-on: ubuntu-latest
    needs: compile_RSC
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Download rsc.exe artifact into rsc-exe
        uses: actions/download-artifact@v4
        with:
          name: rsc-exe
          path: src
      - name: Set up permissions on rsc.exe
        run: |
          chmod +x src/rsc.exe
      - name: Run test
        run: |
          cd src && make check-features

  py_rvm:
    runs-on: ubuntu-latest
    needs: compile_RSC
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}

      - name: Download rsc.exe artifact into rsc-exe
        uses: actions/download-artifact@v4
        with:
          name: rsc-exe
          path: src
      - name: Set up permissions on rsc.exe
        run: |
          chmod +x src/rsc.exe

      - name: Download minify artifact into minify-exe
        uses: actions/download-artifact@v4
        with:
          name: minify-exe
          path: src/scripts
      - name: Set up permissions on minify
        run: |
          chmod +x src/scripts/minify

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install python-minifier

      - name: Run RVM tests
        run: |
          cd src; HOST=py make check RSC_COMPILER="./rsc.exe"

      - name: Run repl tests
        run: |
          cd src; HOST=py make check-repl RSC_COMPILER="./rsc.exe"


  js_rvm:
    runs-on: ubuntu-latest
    needs: compile_RSC
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Download rsc.exe artifact into rsc-exe
        uses: actions/download-artifact@v4
        with:
          name: rsc-exe
          path: src
      - name: Set up permissions on rsc.exe
        run: |
          chmod +x src/rsc.exe
      - name: Download minify artifact into minify-exe
        uses: actions/download-artifact@v4
        with:
          name: minify-exe
          path: src/scripts
      - name: Set up permissions on minify
        run: |
          chmod +x src/scripts/minify

      - name: Set up Nodejs
        uses: actions/setup-node@v4
        with:
          node-version: '21'

      - name: Install google closure compiler (for minification)
        run: |
          npm install --save google-closure-compiler

      - name: Run RVM tests
        run: |
          cd src; HOST=js make check RSC_COMPILER="./rsc.exe"

      - name: Run repl tests
        run: |
          cd src; HOST=js make check-repl RSC_COMPILER="./rsc.exe"


  sh_rvm:
    runs-on: ubuntu-latest
    needs: compile_RSC
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Download rsc.exe artifact into rsc-exe
        uses: actions/download-artifact@v4
        with:
          name: rsc-exe
          path: src
      - name: Set up permissions on rsc.exe
        run: |
          chmod +x src/rsc.exe

      - name: Run RVM tests
        run: |
          cd src; HOST=sh make check RSC_COMPILER="./rsc.exe"

  c_rvm:
    runs-on: ubuntu-latest
    needs: compile_RSC
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Download rsc.exe artifact into rsc-exe
        uses: actions/download-artifact@v4
        with:
          name: rsc-exe
          path: src
      - name: Set up permissions on rsc.exe
        run: |
          chmod +x src/rsc.exe

      - name: Setup gcc
        uses: egor-tensin/setup-gcc@v1
        with:
          version: latest
          platform: x64

      - name: Run RVM tests
        run: |
          cd src; HOST=c make check RSC_COMPILER="./rsc.exe"

      - name: Run repl tests
        run: |
          cd src; HOST=c make check-repl RSC_COMPILER="./rsc.exe"

  asm_rvm:
    runs-on: ubuntu-latest
    needs: compile_RSC
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Download rsc.exe artifact into rsc-exe
        uses: actions/download-artifact@v4
        with:
          name: rsc-exe
          path: src
      - name: Set up permissions on rsc.exe
        run: |
          chmod +x src/rsc.exe
      - uses: ilammy/setup-nasm@v1
      - name: Run RVM tests
        run: |
          cd src; HOST=asm make check RSC_COMPILER="./rsc.exe"

      - name: Run repl tests
        run: |
          cd src; HOST=asm make check-repl RSC_COMPILER="./rsc.exe"

  clj_rvm:
    runs-on: ubuntu-latest
    needs: compile_RSC
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Download rsc.exe artifact into rsc-exe
        uses: actions/download-artifact@v4
        with:
          name: rsc-exe
          path: src
      - name: Set up permissions on rsc.exe
        run: |
          chmod +x src/rsc.exe

      # From https://github.com/marketplace/actions/setup-clojure
      - name: Install clojure tools
        uses: DeLaGuardo/setup-clojure@12.5
        with:
          cli: 1.10.1.693              # Clojure CLI based on tools.deps

      - name: Run tests
        run: |
          cd src; HOST=clj make check RSC_COMPILER="./rsc.exe"

  go_rvm:
    runs-on: ubuntu-latest
    needs: compile_RSC
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Download rsc.exe artifact into rsc-exe
        uses: actions/download-artifact@v4
        with:
          name: rsc-exe
          path: src
      - name: Set up permissions on rsc.exe
        run: |
          chmod +x src/rsc.exe

      # from https://docs.github.com/en/actions/use-cases-and-examples/building-and-testing/building-and-testing-go
      - name: Setup Go 1.23.x
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'

      - name: Run tests
        run: |
          cd src; HOST=go make check RSC_COMPILER="./rsc.exe"

  idr_rvm:
    runs-on: ubuntu-latest
    needs: compile_RSC
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Download rsc.exe artifact into rsc-exe
        uses: actions/download-artifact@v4
        with:
          name: rsc-exe
          path: src
      - name: Set up permissions on rsc.exe
        run: |
          chmod +x src/rsc.exe

      # from https://github.com/marketplace/actions/setup-idris
      # Install idris through homebrew
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install Idris
        run: brew install idris2

      - name: Run tests
        run: |
          cd src; HOST=idr make check RSC_COMPILER="./rsc.exe"

  lisp_rvm:
    runs-on: ubuntu-latest
    needs: compile_RSC
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Download rsc.exe artifact into rsc-exe
        uses: actions/download-artifact@v4
        with:
          name: rsc-exe
          path: src
      - name: Set up permissions on rsc.exe
        run: |
          chmod +x src/rsc.exe

      # from https://github.com/marketplace/actions/setup-steel-bank-common-lisp 
      - name: Setup SBCL
        uses: cheeze2000/setup-sbcl@v1
        with:
          version: 2.2.8

      - name: Run tests
        run: |
          cd src; HOST=lisp make check RSC_COMPILER="./rsc.exe"

  lua_rvm:
    runs-on: ubuntu-latest
    needs: compile_RSC
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Download rsc.exe artifact into rsc-exe
        uses: actions/download-artifact@v4
        with:
          name: rsc-exe
          path: src
      - name: Set up permissions on rsc.exe
        run: |
          chmod +x src/rsc.exe
      - name: Download minify artifact into minify-exe
        uses: actions/download-artifact@v4
        with:
          name: minify-exe
          path: src/scripts
      - name: Set up permissions on minify
        run: |
          chmod +x src/scripts/minify

      # from https://github.com/marketplace/actions/install-lua-luajit
      - name: Install Lua 5.4
        uses: leafo/gh-actions-lua@v10
        with:
          luaVersion: "5.4"
      - name: Run tests
        run: |
          cd src; HOST=lua make check RSC_COMPILER="./rsc.exe"

  ml_rvm:
    runs-on: ubuntu-latest
    needs: compile_RSC
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Download rsc.exe artifact into rsc-exe
        uses: actions/download-artifact@v4
        with:
          name: rsc-exe
          path: src
      - name: Set up permissions on rsc.exe
        run: |
          chmod +x src/rsc.exe

      # Setup Ocaml (https://github.com/ocaml/setup-ocaml) didn't seem to work for me
      # ocaml and ocamlc were not found in path. I'm using homebrew instead to download ocaml
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install Ocaml
        run: brew install ocaml

      - name: Run tests
        run: |
          cd src; HOST=ml make check RSC_COMPILER="./rsc.exe"

  pro_rvm:
    runs-on: ubuntu-latest
    needs: compile_RSC
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Download rsc.exe artifact into rsc-exe
        uses: actions/download-artifact@v4
        with:
          name: rsc-exe
          path: src
      - name: Set up permissions on rsc.exe
        run: |
          chmod +x src/rsc.exe

      # from https://github.com/logtalk-actions/setup-swi-prolog
      - name: Install SWI-Prolog
        uses: logtalk-actions/setup-swi-prolog@master
        with:
          swi-prolog-version: latest
      - name: Run RVM tests
        run: |
          cd src; HOST=pro make check RSC_COMPILER="./rsc.exe"
  
  ps_rvm:
    runs-on: ubuntu-latest
    needs: compile_RSC
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Download rsc.exe artifact into rsc-exe
        uses: actions/download-artifact@v4
        with:
          name: rsc-exe
          path: src
      - name: Set up permissions on rsc.exe
        run: |
          chmod +x src/rsc.exe
      - name: Download minify artifact into minify-exe
        uses: actions/download-artifact@v4
        with:
          name: minify-exe
          path: src/scripts
      - name: Set up permissions on minify
        run: |
          chmod +x src/scripts/minify
      - name: Install Ghostscript
        run: |
          sudo apt-get update
          sudo apt-get install ghostscript -y
      - name: Run RVM tests
        run: |
          cd src; HOST=ps make check RSC_COMPILER="./rsc.exe"
          
  scala_rvm:
    runs-on: ubuntu-latest
    needs: compile_RSC
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Download rsc.exe artifact into rsc-exe
        uses: actions/download-artifact@v4
        with:
          name: rsc-exe
          path: src
      - name: Set up permissions on rsc.exe
        run: |
          chmod +x src/rsc.exe

      # Install Scala through homebrew
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install Scala
        run: brew install scala

      - name: Run RVM tests
        run: |
          cd src; HOST=scala make check RSC_COMPILER="./rsc.exe"


  scm_rvm:
    runs-on: ubuntu-latest
    needs: compile_RSC
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Cache gambit
        id: cache-gambit
        uses: actions/cache@v3
        env:
          cache-name: cache-gambit
        with:
          path: ./gambit
          key: gambit-v4.9.5-${{ runner.os }}

      - if: ${{ steps.cache-gambit.outputs.cache-hit != 'true' }}
        name: Install Gambit Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install texinfo autoconf2.69
          sudo ln -s -f `which autoconf2.69` `which autoconf`

      - if: ${{ steps.cache-gambit.outputs.cache-hit != 'true' }}
        name: Checkout the gambit repository
        uses: actions/checkout@v2
        with:
          repository: gambit/gambit
          ref: v4.9.5
          path: gambit-src

      - if: ${{ steps.cache-gambit.outputs.cache-hit != 'true' }}
        name: Build Gambit for Use
        run: |
          mkdir gambit
          cd gambit-src && ./configure --enable-single-host --enable-gambitdir=~~execdir/.. --prefix=$(pwd)/../gambit --enable-targets=""  && make clean && make -j`nproc` core && make modules && make install

      - name: Make sure gsi and gsc are working
        run: |
          ./gambit/bin/gsi -v
          ./gambit/bin/gsc -v

      - name: Download rsc.exe artifact into rsc-exe
        uses: actions/download-artifact@v4
        with:
          name: rsc-exe
          path: src

      - name: Set up permissions on rsc.exe
        run: |
          chmod +x src/rsc.exe

      - name: Run RVM tests
        run: |
          cd src; HOST=scm make check RSC_COMPILER="./rsc.exe" SCM_HOST_INTERPRETER="$(pwd)/../gambit/bin/gsi" SCM_HOST_COMPILER="$(pwd)/../gambit/bin/gsc -exe -o"

  hs_rvm:
    runs-on: ubuntu-latest
    needs: compile_RSC
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Download rsc.exe artifact into rsc-exe
        uses: actions/download-artifact@v4
        with:
          name: rsc-exe
          path: src
      - name: Set up permissions on rsc.exe
        run: |
          chmod +x src/rsc.exe
      - name: Download minify artifact into minify-exe
        uses: actions/download-artifact@v4
        with:
          name: minify-exe
          path: src/scripts
      - name: Set up permissions on minify
        run: |
          chmod +x src/scripts/minify
      - uses: haskell-actions/setup@v2
      - name: Run RVM tests
        run: |
          cd src; HOST=hs make check RSC_COMPILER="./rsc.exe"

      - name: Run repl tests
        run: |
          cd src; HOST=hs make check-repl RSC_COMPILER="./rsc.exe"
  wat_rvm:
    runs-on: ubuntu-latest
    needs: compile_RSC
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Download rsc.exe artifact into rsc-exe
        uses: actions/download-artifact@v4
        with:
          name: rsc-exe
          path: src
      - name: Set up permissions on rsc.exe
        run: |
          chmod +x src/rsc.exe
      - name: Download minify artifact into minify-exe
        uses: actions/download-artifact@v4
        with:
          name: minify-exe
          path: src/scripts
      - name: Set up permissions on minify
        run: |
          chmod +x src/scripts/minify
      - name: Install wasmtime
        uses: jcbhmr/setup-wasmtime@v2
      - name: Install wabt tools
        uses: mwilliamson/setup-wabt-action@v3
        with:
          wabt-version: "1.0.36"
      - name: Install deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
      - name: Run RVM tests
        run: |
          cd src; HOST=wat make check RSC_COMPILER="./rsc.exe"

  zig_rvm:
    runs-on: ubuntu-latest
    needs: compile_RSC
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Download rsc.exe artifact into rsc-exe
        uses: actions/download-artifact@v4
        with:
          name: rsc-exe
          path: src
      - name: Set up permissions on rsc.exe
        run: |
          chmod +x src/rsc.exe
      - name: Install Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.13.0

      - name: Run RVM tests
        run: |
          cd src; HOST=zig make check RSC_COMPILER="./rsc.exe"
  
  java_rvm:
    runs-on: ubuntu-latest
    needs: compile_RSC
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Download rsc.exe artifact into rsc-exe
        uses: actions/download-artifact@v4
        with:
          name: rsc-exe
          path: src
      - name: Set up permissions on rsc.exe
        run: |
          chmod +x src/rsc.exe
      - name: Download minify artifact into minify-exe
        uses: actions/download-artifact@v4
        with:
          name: minify-exe
          path: src/scripts
      - name: Set up permissions on minify
        run: |
          chmod +x src/scripts/minify
      - name: Install java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Run RVM tests
        run: |
          cd src; HOST=java make check RSC_COMPILER="./rsc.exe"
     
  adb_rvm:
    runs-on: ubuntu-latest
    needs: compile_RSC
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Download rsc.exe artifact into rsc-exe
        uses: actions/download-artifact@v4
        with:
          name: rsc-exe
          path: src
      - name: Set up permissions on rsc.exe
        run: |
          chmod +x src/rsc.exe
      - name: Download minify artifact into minify-exe
        uses: actions/download-artifact@v4
        with:
          name: minify-exe
          path: src/scripts
      - name: Set up permissions on minify
        run: |
          chmod +x src/scripts/minify
      - name: Install gnat
        run: |
          sudo apt-get update
          sudo apt-get install gnat
      - name: Run RVM tests
        run: |
          cd src; HOST=adb make check RSC_COMPILER="./rsc.exe"

  pl_rvm:
    runs-on: ubuntu-latest
    needs: compile_RSC
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Download rsc.exe artifact into rsc-exe
        uses: actions/download-artifact@v4
        with:
          name: rsc-exe
          path: src
      - name: Set up permissions on rsc.exe
        run: |
          chmod +x src/rsc.exe
      - name: Download minify artifact into minify-exe
        uses: actions/download-artifact@v4
        with:
          name: minify-exe
          path: src/scripts
      - name: Set up permissions on minify
        run: |
          chmod +x src/scripts/minify
      - name: Install pl
        uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: "5.38"
      - name: Run RVM tests
        run: |
          cd src; HOST=pl make check RSC_COMPILER="./rsc.exe"

  julia_rvm:
    runs-on: ubuntu-latest
    needs: compile_RSC
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Download rsc.exe artifact into rsc-exe
        uses: actions/download-artifact@v4
        with:
          name: rsc-exe
          path: src
      - name: Set up permissions on rsc.exe
        run: |
          chmod +x src/rsc.exe

      - name: Install Julia
        uses: julia-actions/setup-julia@v1
        with:
          version: '1.11.3' 

      - name: Run RVM tests for Julia
        run: |
          cd src; HOST=jl make check RSC_COMPILER="./rsc.exe"
  
  kt_rvm:
    runs-on: ubuntu-latest
    needs: compile_RSC
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Download rsc.exe artifact into rsc-exe
        uses: actions/download-artifact@v4
        with:
          name: rsc-exe
          path: src
      - name: Set up permissions on rsc.exe
        run: |
          chmod +x src/rsc.exe
      - name: Download minify artifact into minify-exe
        uses: actions/download-artifact@v4
        with:
          name: minify-exe
          path: src/scripts
      - name: Set up permissions on minify
        run: |
          chmod +x src/scripts/minify
          
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '21'
      - name: Install Kotlin
        uses: fwilhe2/setup-kotlin@main
      - name: Run RVM tests
        run: |
          cd src; HOST=kt make check RSC_COMPILER="./rsc.exe"


  dart_rvm:
    runs-on: ubuntu-latest
    needs: compile_RSC
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Download rsc.exe artifact into rsc-exe
        uses: actions/download-artifact@v4
        with:
          name: rsc-exe
          path: src
      - name: Set up permissions on rsc.exe
        run: |
          chmod +x src/rsc.exe
      - name: Download minify artifact into minify-exe
        uses: actions/download-artifact@v4
        with:
          name: minify-exe
          path: src/scripts
      - name: Set up permissions on minify
        run: |
          chmod +x src/scripts/minify
      - name: Install dart
        uses: dart-lang/setup-dart@v1
      - name: Run RVM tests
        run: |
          cd src; HOST=dart make check RSC_COMPILER="./rsc.exe"


  bas_rvm:
    runs-on: ubuntu-latest
    needs: compile_RSC
    steps:
      - name: Checkout the ribbit repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Download rsc.exe artifact into rsc-exe
        uses: actions/download-artifact@v4
        with:
          name: rsc-exe
          path: src
      - name: Set up permissions on rsc.exe
        run: |
          chmod +x src/rsc.exe
      - name: Download minify artifact into minify-exe
        uses: actions/download-artifact@v4
        with:
          name: minify-exe
          path: src/scripts
      - name: Set up permissions on minify
        run: |
          chmod +x src/scripts/minify

#- name: Cache yabasic
#  id: cache-yabasic
#  uses: actions/cache@v3
#  env:
#    cache-name: cache-yabasic
#  with:
#    path: ./yabasic-bin/yabasic
#    key: yabasic-32aef01

#     - if: ${{ steps.cache-yabasic.outputs.cache-hit != 'true' }}
      - name: Install moded version of yabasic
        run: |
          sudo apt-get update
          sudo apt-get install -y git libx11-dev libxt-dev libncurses-dev
          git clone https://github.com/marcIhm/yabasic yabasic-src
          cd yabasic-src \
            && git checkout 32aef01 \
            && cd -
          mkdir yabasic-bin
          cd yabasic-src/unix/lang \
            && CFLAGS="-D YY_BUF_SIZE=16777216" ./configure --without-ffi \
            && make \
            && cd -
          mv yabasic-src/unix/lang/yabasic yabasic-bin/yabasic

      - name: Add yabasic to path
        run: |
          echo "PATH=$PATH:$(pwd)/yabasic-bin" >> $GITHUB_ENV

      - name: Run RVM tests
        run: |
          cd src; HOST=bas make check RSC_COMPILER="./rsc.exe"
