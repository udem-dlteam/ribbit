#!/bin/sh

gsi -e "(define (clean x) (if (list? x) (apply append (map (lambda (e) (if (and (pair? e) (memq (car e) (quote (cond-expand trace-instruction)))) (list) (list (clean e)))) x)) x))(for-each pretty-print (clean (read-all)))" | \
`dirname "$0"`/../../scripts/minify \
"and" "begin" "case" "cond" "define" "delay" "do" "if" "lambda" "let" "let*" "letrec" "or" "quasiquote" "quote" "set!" "else" "=>" "*" "+" "-" "/" "<" "<=" "=" ">" ">=" "abs" "acos" "angle" "append" "apply" "asin" "assoc" "assq" "assv" "atan" "boolean?" "caaaar" "caaadr" "caaar" "caadar" "caaddr" "caadr" "caar" "cadaar" "cadadr" "cadar" "caddar" "cadddr" "caddr" "cadr" "call/cc" "call-with-current-continuation" "call-with-input-file" "call-with-output-file" "car" "cdaaar" "cdaadr" "cdaar" "cdadar" "cdaddr" "cdadr" "cdar" "cddaar" "cddadr" "cddar" "cdddar" "cddddr" "cdddr" "cddr" "cdr" "ceiling" "char->integer" "char-alphabetic?" "char-ci<=?" "char-ci<?" "char-ci=?" "char-ci>=?" "char-ci>?" "char-downcase" "char-lower-case?" "char-numeric?" "char-ready?" "char-upcase" "char-upper-case?" "char-whitespace?" "char<=?" "char<?" "char=?" "char>=?" "char>?" "char?" "close-input-port" "close-output-port" "complex?" "cons" "cos" "current-input-port" "current-output-port" "denominator" "display" "eof-object?" "eq?" "equal?" "eqv?" "even?" "exact->inexact" "exact?" "exp" "expt" "floor" "for-each" "force" "gcd" "imag-part" "inexact->exact" "inexact?" "input-port?" "integer->char" "integer?" "lcm" "length" "list" "list->string" "list->vector" "list-ref" "list-tail" "list?" "load" "log" "magnitude" "make-polar" "make-rectangular" "make-string" "make-vector" "map" "max" "member" "memq" "memv" "min" "modulo" "negative?" "newline" "not" "null?" "number->string" "number?" "numerator" "odd?" "open-input-file" "open-output-file" "output-port?" "pair?" "peek-char" "positive?" "procedure?" "quotient" "rational?" "rationalize" "read" "read-char" "real-part" "real?" "remainder" "reverse" "round" "set-car!" "set-cdr!" "sin" "sqrt" "string" "string->list" "string->number" "string->symbol" "string-append" "string-ci<=?" "string-ci<?" "string-ci=?" "string-ci>=?" "string-ci>?" "string-copy" "string-fill!" "string-length" "string-ref" "string-set!" "string<=?" "string<?" "string=?" "string>=?" "string>?" "string?" "substring" "symbol->string" "symbol?" "tan" "transcript-off" "transcript-on" "truncate" "vector" "vector->list" "vector-fill!" "vector-length" "vector-ref" "vector-set!" "vector?" "with-input-from-file" "with-output-to-file" "write" "write-char" "zero?" \
"cond-expand" "trace-instruction"
